}
#if we have data, then we will look for the snp with the highest ld value
else
{
print(head(df_ld))
print(dim(df_ld))
max_subset <- df_ld[df_ld$R2 == max(df_ld$R2),]
print("max subset:")
print(max_subset)
#sometimes have more than one maximum R2. If so, then just pick the first snp in the subset df
if(nrow(max_subset) > 1)
{
max_subset <- max_subset[1,]
}
row$'forced_lead_variant' <- max_subset$rsid
row$'forced_lead_variant_ld' <- max_subset$R2
}
}
evidence_merged[rownum,] <- row
}
}
#run this rownum assignment and the following lines to just test one
rownum <- 177
row <- evidence_merged[rownum,]
population="EUR"
chr <- row$CHR
snp <- row$SNP
#use code from locuscomparer to get the LD data they use to generate the plots
data(config)
on.exit(rm(config))
conn = RMySQL::dbConnect(RMySQL::MySQL(),"locuscompare",config$b,config$c,config$a)
on.exit(RMySQL::dbDisconnect(conn))
res1 = DBI::dbGetQuery(
conn = conn,
statement = sprintf(
"select SNP_A, SNP_B, R2
from tkg_p3v5a_ld_chr%s_%s
where SNP_A = '%s';",
chr,
population,
snp
)
)
res2 = DBI::dbGetQuery(
conn = conn,
statement = sprintf(
"select SNP_B as SNP_A, SNP_A as SNP_B, R2
from tkg_p3v5a_ld_chr%s_%s
where SNP_B = '%s';",
chr,
population,
snp
)
)
#close the connection so R doesn't yell at us
RMySQL::dbDisconnect(conn)
res = rbind(res1,res2)
gene <- row$Gene
feature <- row$feature
print(paste0("checking", snp, " " , gene, " ", feature))
#get file path strings
gwas_fn = paste0(tsv_dir, '/', gene, '_',feature,'_gwas.tsv')
eqtl_fn = paste0(tsv_dir, '/', gene, '_',feature,'_eqtl.tsv')
#check if the files actually exist
if(file.exists(gwas_fn) && file.exists(eqtl_fn))
{
print("files exist")
#read the tsv files
g = read.table(gwas_fn, header = T)
e = read.table(eqtl_fn, header = T)
#if they both aren't empty
if(nrow(g)!=0 && nrow(e)!=0)
{
#merge them by rsid
df = merge(g, e, by = 'rsid')
print("df:")
print(head(df))
#check if the risk variant is already in the data. If so, then we are fine
if(row$SNP %in% df$rsid)
{
print("we have the risk snp!!!")
row$'forced_lead_variant' <- row$SNP
row$'forced_lead_variant_ld' <- 1
}
#if we don't have the risk variant then we need to look for the next best LD snp
else
{
#now inner join with the rsid LD dataframe we obtained earlier
df_ld <- merge(df, res , by.x='rsid',by.y='SNP_B')
#if no rows, then we have no good candidates, so we will have to default to the snp with the highest p value for the marked variant in the plot later
if(nrow(df_ld)==0)
{
print("no snps with LD!!!")
}
#if we have data, then we will look for the snp with the highest ld value
else
{
print(head(df_ld))
print(dim(df_ld))
max_subset <- df_ld[df_ld$R2 == max(df_ld$R2),]
print("max subset:")
print(max_subset)
#sometimes have more than one maximum R2. If so, then just pick the first snp in the subset df
if(nrow(max_subset) > 1)
{
max_subset <- max_subset[1,]
}
row$'forced_lead_variant' <- max_subset$rsid
row$'forced_lead_variant_ld' <- max_subset$R2
}
}
evidence_merged[rownum,] <- row
}
}
#run this rownum assignment and the following lines to just test one
rownum <- 183
row <- evidence_merged[rownum,]
population="EUR"
chr <- row$CHR
snp <- row$SNP
#use code from locuscomparer to get the LD data they use to generate the plots
data(config)
on.exit(rm(config))
conn = RMySQL::dbConnect(RMySQL::MySQL(),"locuscompare",config$b,config$c,config$a)
on.exit(RMySQL::dbDisconnect(conn))
res1 = DBI::dbGetQuery(
conn = conn,
statement = sprintf(
"select SNP_A, SNP_B, R2
from tkg_p3v5a_ld_chr%s_%s
where SNP_A = '%s';",
chr,
population,
snp
)
)
res2 = DBI::dbGetQuery(
conn = conn,
statement = sprintf(
"select SNP_B as SNP_A, SNP_A as SNP_B, R2
from tkg_p3v5a_ld_chr%s_%s
where SNP_B = '%s';",
chr,
population,
snp
)
)
#close the connection so R doesn't yell at us
RMySQL::dbDisconnect(conn)
res = rbind(res1,res2)
gene <- row$Gene
feature <- row$feature
print(paste0("checking", snp, " " , gene, " ", feature))
#get file path strings
gwas_fn = paste0(tsv_dir, '/', gene, '_',feature,'_gwas.tsv')
eqtl_fn = paste0(tsv_dir, '/', gene, '_',feature,'_eqtl.tsv')
#check if the files actually exist
if(file.exists(gwas_fn) && file.exists(eqtl_fn))
{
print("files exist")
#read the tsv files
g = read.table(gwas_fn, header = T)
e = read.table(eqtl_fn, header = T)
#if they both aren't empty
if(nrow(g)!=0 && nrow(e)!=0)
{
#merge them by rsid
df = merge(g, e, by = 'rsid')
print("df:")
print(head(df))
#check if the risk variant is already in the data. If so, then we are fine
if(row$SNP %in% df$rsid)
{
print("we have the risk snp!!!")
row$'forced_lead_variant' <- row$SNP
row$'forced_lead_variant_ld' <- 1
}
#if we don't have the risk variant then we need to look for the next best LD snp
else
{
#now inner join with the rsid LD dataframe we obtained earlier
df_ld <- merge(df, res , by.x='rsid',by.y='SNP_B')
#if no rows, then we have no good candidates, so we will have to default to the snp with the highest p value for the marked variant in the plot later
if(nrow(df_ld)==0)
{
print("no snps with LD!!!")
}
#if we have data, then we will look for the snp with the highest ld value
else
{
print(head(df_ld))
print(dim(df_ld))
max_subset <- df_ld[df_ld$R2 == max(df_ld$R2),]
print("max subset:")
print(max_subset)
#sometimes have more than one maximum R2. If so, then just pick the first snp in the subset df
if(nrow(max_subset) > 1)
{
max_subset <- max_subset[1,]
}
row$'forced_lead_variant' <- max_subset$rsid
row$'forced_lead_variant_ld' <- max_subset$R2
}
}
evidence_merged[rownum,] <- row
}
}
#run this rownum assignment and the following lines to just test one
rownum <- 220
row <- evidence_merged[rownum,]
population="EUR"
chr <- row$CHR
snp <- row$SNP
#use code from locuscomparer to get the LD data they use to generate the plots
data(config)
on.exit(rm(config))
conn = RMySQL::dbConnect(RMySQL::MySQL(),"locuscompare",config$b,config$c,config$a)
on.exit(RMySQL::dbDisconnect(conn))
res1 = DBI::dbGetQuery(
conn = conn,
statement = sprintf(
"select SNP_A, SNP_B, R2
from tkg_p3v5a_ld_chr%s_%s
where SNP_A = '%s';",
chr,
population,
snp
)
)
res2 = DBI::dbGetQuery(
conn = conn,
statement = sprintf(
"select SNP_B as SNP_A, SNP_A as SNP_B, R2
from tkg_p3v5a_ld_chr%s_%s
where SNP_B = '%s';",
chr,
population,
snp
)
)
#close the connection so R doesn't yell at us
RMySQL::dbDisconnect(conn)
res = rbind(res1,res2)
gene <- row$Gene
feature <- row$feature
print(paste0("checking", snp, " " , gene, " ", feature))
#get file path strings
gwas_fn = paste0(tsv_dir, '/', gene, '_',feature,'_gwas.tsv')
eqtl_fn = paste0(tsv_dir, '/', gene, '_',feature,'_eqtl.tsv')
#check if the files actually exist
if(file.exists(gwas_fn) && file.exists(eqtl_fn))
{
print("files exist")
#read the tsv files
g = read.table(gwas_fn, header = T)
e = read.table(eqtl_fn, header = T)
#if they both aren't empty
if(nrow(g)!=0 && nrow(e)!=0)
{
#merge them by rsid
df = merge(g, e, by = 'rsid')
print("df:")
print(head(df))
#check if the risk variant is already in the data. If so, then we are fine
if(row$SNP %in% df$rsid)
{
print("we have the risk snp!!!")
row$'forced_lead_variant' <- row$SNP
row$'forced_lead_variant_ld' <- 1
}
#if we don't have the risk variant then we need to look for the next best LD snp
else
{
#now inner join with the rsid LD dataframe we obtained earlier
df_ld <- merge(df, res , by.x='rsid',by.y='SNP_B')
#if no rows, then we have no good candidates, so we will have to default to the snp with the highest p value for the marked variant in the plot later
if(nrow(df_ld)==0)
{
print("no snps with LD!!!")
}
#if we have data, then we will look for the snp with the highest ld value
else
{
print(head(df_ld))
print(dim(df_ld))
max_subset <- df_ld[df_ld$R2 == max(df_ld$R2),]
print("max subset:")
print(max_subset)
#sometimes have more than one maximum R2. If so, then just pick the first snp in the subset df
if(nrow(max_subset) > 1)
{
max_subset <- max_subset[1,]
}
row$'forced_lead_variant' <- max_subset$rsid
row$'forced_lead_variant_ld' <- max_subset$R2
}
}
evidence_merged[rownum,] <- row
}
}
#run this rownum assignment and the following lines to just test one
rownum <- 439
row <- evidence_merged[rownum,]
population="EUR"
chr <- row$CHR
snp <- row$SNP
#use code from locuscomparer to get the LD data they use to generate the plots
data(config)
on.exit(rm(config))
conn = RMySQL::dbConnect(RMySQL::MySQL(),"locuscompare",config$b,config$c,config$a)
on.exit(RMySQL::dbDisconnect(conn))
res1 = DBI::dbGetQuery(
conn = conn,
statement = sprintf(
"select SNP_A, SNP_B, R2
from tkg_p3v5a_ld_chr%s_%s
where SNP_A = '%s';",
chr,
population,
snp
)
)
res2 = DBI::dbGetQuery(
conn = conn,
statement = sprintf(
"select SNP_B as SNP_A, SNP_A as SNP_B, R2
from tkg_p3v5a_ld_chr%s_%s
where SNP_B = '%s';",
chr,
population,
snp
)
)
#close the connection so R doesn't yell at us
RMySQL::dbDisconnect(conn)
res = rbind(res1,res2)
gene <- row$Gene
feature <- row$feature
print(paste0("checking", snp, " " , gene, " ", feature))
#get file path strings
gwas_fn = paste0(tsv_dir, '/', gene, '_',feature,'_gwas.tsv')
eqtl_fn = paste0(tsv_dir, '/', gene, '_',feature,'_eqtl.tsv')
#check if the files actually exist
if(file.exists(gwas_fn) && file.exists(eqtl_fn))
{
print("files exist")
#read the tsv files
g = read.table(gwas_fn, header = T)
e = read.table(eqtl_fn, header = T)
#if they both aren't empty
if(nrow(g)!=0 && nrow(e)!=0)
{
#merge them by rsid
df = merge(g, e, by = 'rsid')
print("df:")
print(head(df))
#check if the risk variant is already in the data. If so, then we are fine
if(row$SNP %in% df$rsid)
{
print("we have the risk snp!!!")
row$'forced_lead_variant' <- row$SNP
row$'forced_lead_variant_ld' <- 1
}
#if we don't have the risk variant then we need to look for the next best LD snp
else
{
#now inner join with the rsid LD dataframe we obtained earlier
df_ld <- merge(df, res , by.x='rsid',by.y='SNP_B')
#if no rows, then we have no good candidates, so we will have to default to the snp with the highest p value for the marked variant in the plot later
if(nrow(df_ld)==0)
{
print("no snps with LD!!!")
}
#if we have data, then we will look for the snp with the highest ld value
else
{
print(head(df_ld))
print(dim(df_ld))
max_subset <- df_ld[df_ld$R2 == max(df_ld$R2),]
print("max subset:")
print(max_subset)
#sometimes have more than one maximum R2. If so, then just pick the first snp in the subset df
if(nrow(max_subset) > 1)
{
max_subset <- max_subset[1,]
}
row$'forced_lead_variant' <- max_subset$rsid
row$'forced_lead_variant_ld' <- max_subset$R2
}
}
evidence_merged[rownum,] <- row
}
}
#run this rownum assignment and the following lines to just test one
rownum <- 537
row <- evidence_merged[rownum,]
population="EUR"
chr <- row$CHR
snp <- row$SNP
#use code from locuscomparer to get the LD data they use to generate the plots
data(config)
on.exit(rm(config))
conn = RMySQL::dbConnect(RMySQL::MySQL(),"locuscompare",config$b,config$c,config$a)
on.exit(RMySQL::dbDisconnect(conn))
res1 = DBI::dbGetQuery(
conn = conn,
statement = sprintf(
"select SNP_A, SNP_B, R2
from tkg_p3v5a_ld_chr%s_%s
where SNP_A = '%s';",
chr,
population,
snp
)
)
res2 = DBI::dbGetQuery(
conn = conn,
statement = sprintf(
"select SNP_B as SNP_A, SNP_A as SNP_B, R2
from tkg_p3v5a_ld_chr%s_%s
where SNP_B = '%s';",
chr,
population,
snp
)
)
#close the connection so R doesn't yell at us
RMySQL::dbDisconnect(conn)
res = rbind(res1,res2)
gene <- row$Gene
feature <- row$feature
print(paste0("checking", snp, " " , gene, " ", feature))
#get file path strings
gwas_fn = paste0(tsv_dir, '/', gene, '_',feature,'_gwas.tsv')
eqtl_fn = paste0(tsv_dir, '/', gene, '_',feature,'_eqtl.tsv')
#check if the files actually exist
if(file.exists(gwas_fn) && file.exists(eqtl_fn))
{
print("files exist")
#read the tsv files
g = read.table(gwas_fn, header = T)
e = read.table(eqtl_fn, header = T)
#if they both aren't empty
if(nrow(g)!=0 && nrow(e)!=0)
{
#merge them by rsid
df = merge(g, e, by = 'rsid')
print("df:")
print(head(df))
#check if the risk variant is already in the data. If so, then we are fine
if(row$SNP %in% df$rsid)
{
print("we have the risk snp!!!")
row$'forced_lead_variant' <- row$SNP
row$'forced_lead_variant_ld' <- 1
}
#if we don't have the risk variant then we need to look for the next best LD snp
else
{
#now inner join with the rsid LD dataframe we obtained earlier
df_ld <- merge(df, res , by.x='rsid',by.y='SNP_B')
#if no rows, then we have no good candidates, so we will have to default to the snp with the highest p value for the marked variant in the plot later
if(nrow(df_ld)==0)
{
print("no snps with LD!!!")
}
#if we have data, then we will look for the snp with the highest ld value
else
{
print(head(df_ld))
print(dim(df_ld))
max_subset <- df_ld[df_ld$R2 == max(df_ld$R2),]
print("max subset:")
print(max_subset)
#sometimes have more than one maximum R2. If so, then just pick the first snp in the subset df
if(nrow(max_subset) > 1)
{
max_subset <- max_subset[1,]
}
row$'forced_lead_variant' <- max_subset$rsid
row$'forced_lead_variant_ld' <- max_subset$R2
}
}
evidence_merged[rownum,] <- row
}
}
View(res)
View(df)
setwd("/Users/grennfp/Documents/Rfiles/GWASLocusBrowserProject/GWAS_locus_browser/DataProcessing/qtl")
full <- fread("Full_hg19_cis-eQTL.txt.gz")
head(full)
length(full)
nrow(full)
tail(full)
sub <- full[full$V1=="ENSG00000262333.1",]
View(sub)
library(data.table)
setwd("/Users/grennfp/Documents/Rfiles/GWASLocusBrowserProject/GWAS_locus_browser/DataProcessing/qtl")
snp_data <- fread("snps.txt")
loci <- fread("/Users/grennfp/Documents/Rfiles/GWASLocusBrowserProject/GWAS_locus_browser/www/GWAS loci overview.csv")
setwd("/Users/grennfp/Documents/Rfiles/GWASLocusBrowserProject/GWAS_locus_browser/DataProcessing/qtl")
snp_data <- fread("snps.txt")
loci <- fread("/Users/grennfp/Documents/Rfiles/GWASLocusBrowserProject/GWAS_locus_browser/www/GWAS loci overview.csv")
View(loci)
snps <- loci$SNP
head(snp_data)
sub <- snp_data[which(snp_data$Rsid %in% snps),]
View(sub)
snp_data <- fread("SNP_Information_Table_with_Alleles.txt")
loci <- fread("/Users/grennfp/Documents/Rfiles/GWASLocusBrowserProject/GWAS_locus_browser/www/GWAS loci overview.csv")
snps <- loci$SNP
sub <- snp_data[which(snp_data$Rsid %in% snps),]
